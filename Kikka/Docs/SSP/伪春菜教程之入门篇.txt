#本系列教程完全整理自“中文偽春菜後援會”（URL:http://cuc2.idv.tw/wiki/），原文为繁体中文，经过google翻译为简体中文，

#发布本教程纯粹是为了方便大家学习制作伪春菜（sakura，SSP），如感觉文章文笔欠佳，请询问google翻译；

#如果，你有什么问题，你可以联系我，或是加入我的QQ群：135243076，我们可以一起讨论；


      


前言 
作为制作人格的入门第一步，您必须要先解伪春菜人格的档案配置的方式，读完本文后你应可以：
了解自制人格的可能性
了解伪春菜的人格构成法则
了解伪春菜人格档案的配置
了解伪AI扮演的角色
本文不会提到的有：
详细的伪AI语法撰写：目前比较完整的中文伪AI说明书是AYA(文)。
伪春菜的外表图片如何操纵
这些会待其他专栏来补完

来自制人格吧 
把玩一阵子的伪春菜之后，一般玩家或多或少会想要制作一只专属于自己的人格，但在这之前可能会被一大堆的规格书给吓倒。本系列的目的在于将这些规格抽丝剥茧，分门别类的整理出来，让想入手自制人格的玩家们有路径一窥这神秘的殿堂。

自制人格的好处 
那么自制パソコン~啊不是，是自制人格有什么好处呢?用别人写好的Ghost不也满愉快的?其实这还是看个人喜好的程度，毕竟这是进阶伺か的玩法。
自己定制的Ghost有一些谜样的好处：
自制パソコン万岁(这是啥?!)
选项对话可完全符合自己的喜好(例如谜样的萌え度)
可以设定特定的事件程序(如定点报时)提醒自己要做的事情
跟同好交流分享?!
其实有点类似画同人志那样，有自己想发挥以及想表达的事物，自然也是你自身的能力的证明。做的好的话，或许日后会有人直接找你定制Ghost也说不定喔。

基础知识 
想要自制人格的话，建议玩家们最好有基础的程式设计概念，这样要入手设计人格才不会遇到观念上的阻碍。伪AI的基本功能是要帮玩家们处里掉程式底层的部份，并提供整合后的高阶语法来方便玩家进行设计。
如果没有程式设计概念的话怎么办?(人家今年才12岁耶)你可以从现在开始学点程式设计概念，但这并"不是"意味着你要学好几个月或十年，从小罗莉变成大姐姐后...啊不是啦，变成资深程式设计师后才有办法入手，不是这样的。自制人格只需要拥有最基础的程式设计概念就可以了。也就是说只要是初学者的程度，就可以来玩了，进阶以及底层的部份伪AI会帮你处里掉，这也是伪AI存在的目的。所谓低阶的部份可能包括：字串分解与组合
加减乘除运算
选单的构成
事件触发程序，例如滑鼠点击，计时器等。

简述伪AI 
伪AI是架构在伪春菜底下的一只拟似AI(人工智慧)的程式，她专门负责将玩家撰写的语法以及图片资讯解析后，传送给SSP核心程式，让核心程式根据这些资料来作反应，此时你就会看到伪春菜在说话或是改变表情。
因为不是真正的AI，只是模拟一些简单的AI功能，所以日文用伪AI来称呼，其中伪(にせ)是"假的"的意思，中文的话可以称之为拟似人工智慧。
伪AI有个统称叫做shiori，一般以.dll的型态存在，以程式概念来讲，她是个动态联结函式库(也就是程式图书馆的意思)，一般由C语言写成。由于伪AI的规格是开放的，所以有许许多多的伪AI存在着，提供各自专属的语法与功能。
你可以把SSP核心程式想像成一栋洋房，里面可以住很多只伪AI女仆，每只伪AI女仆拥有的能力各有不同，但目的都是相同的，就是作为玩家以及SSP核心程式之间的沟通桥梁。

目录架构 
让我们先来了解一个Ghost的目录架构，要让Ghost正常的运作，必须要遵循这个概念去放置相关档案：

在这边我们假定你的伪春菜目录名称为"tssp"。如上图所示，人格档案主要是放置在"tssp\Ghost"之下，个别以Ghost_Name的方式自成一个专属的目录。
-这里为了方便解释，我使用自己建立的Ghost_name目录。
-实际上这目录名称是随人格不同而有不同名称的。
-如中文版橘花为"KiKKa_C"，日文版橘花为"Taromati"。
其中：
"Ghost_Name\Ghost\Master" 之下放置的是伪AI人格档案，包括所有的对话以及反应事件等。

"Ghost_Name\Shell\Master" 之下放置的是该人格专属的Shell图片档案，即实际与玩家互动的人格外表。

这是最基础的架构，除了Ghost_Name可以随着不同的人格而有所变动之外，其余都必须按照图示的目录名称。另外要注意的是：
一个人格只能有一个伪AI系统，所以"Ghost_Name\Ghost"之下的只能有一个目录，而且名称必须是"Master"，用来放置整个Ghost的伪AI档案。
一个人格可以有多个Shell外观，所以"Ghost_Name\Shell"之下除了"Master"预设值目录之外，还可以有其他不同名称的目录，内含各种不同的shell图片，如"cloth1"、"cloth2"这样。当其他的Shell目录存在之时，便可以在伪春菜的右键选单之中的"衣物"项目中来选择更换其他的外表，否则就只会看到一个预设Shell能选择。
PS."衣物"这个名称随不同的人格而有不同，这是因为透过伪AI提供的语法设定，可以替换选单的文字样式。

衣着替换范例 
例如这是理梦的shell目录，底下除了Master外，还有"glorious"这个目录：

在右键选单内的著衣替换项目内，就会多出一个glorious可以选择：

这是橘花的范例：


配置档案 
了解了目录架构之后，我们就可以来配置所需要的档案了，以下是各目录要放置的档案列表：
Ghost_Name Ghost主目录，用来放置Ghost以及Shell二个子目录，以及Ghost Banner图示：thumbnail.png也是放置在这里面。
Ghost\Master 伪AI档案，如shiori.dll、misaka.dll、KEEPS等档案都是放在这边。主要为Ghost的对话以及反应、运作时的设定档。
Shell\Master 预设Shell外观图片全部放在这里，其中的surface.txt指定各个shell的对应以及动画的运作(如眨眼睛)
除了必要的相关档案之外，您可以自行放置其他如readme.txt之类的说明档，这并不会影响到Ghost的运作。SSP核心程式只会读取必要的档案。

规格之外 
以上所提的是目前公定的格式，但实际上这个目录架构已经历经了许多次的转变，另外又牵涉到SSP核心程式的支援度，这也是会产生相容性问题的原因之一。由于目录架构以及档案配置不正确，或是使用无法互相匹配的版本，自然人格会无法安装，或者安装后无法正常运作。教学这边只能就通用架构来做讲解，如果你有遇到这类非常规的奇怪人格，欢迎到论坛来讨论。（>_<，放心，一般人是去不了滴）

伪AI导论

伪AI (SHIORI) 可以说是伺か的精神所在，一个撰写良好的伪AI 除了能提供相当丰富的功能之外，也能将Ghost 发挥的淋漓尽致。尽管漂亮的Shell 人人都喜欢，然而我们依然不能否认，最能让人们印象深刻的，还是Ghost 的个性以及会话内容。因此伪AI 是绝对不可忽略的一个要素。
在正式进入专栏之前，您必须了解到，这是伺か的进阶文章，难度上会提升许多。因此请务必先完整的看过进阶教学篇，将目录概念建立好，这在编写伪AI的过程将会是很重要的基础知识喔。

概念 
在进阶教学的专栏中，我们简介了伪AI，但并没有详细的说明伪AI到底是怎么样的一个事物，在此一并作个解释。另外也请先复习一下目录对应概念，在此就不多作叙述了。
所谓的伪AI，本身仅是个DLL动态连结档，一般由C语言所构成，再经过C语言编译程式编译成DLL。例如华和梨套件整个核心所在，也只是shiori.dll这个档案，其余的kawari.ini、KEEPS等等文件都是附属于shiori核心之下的档案。其对应关系如下：
　　　　　　　SSP ──┐
(SAKURA语法) 　　　↓(系统事件)
└─ Shiori.dll　←　kawari.ini
　　　　　　　　　　│
└→ AI辞书(纯文字档)
其中，kawari.ini主要用来指定要连结的AI语法文件，内容格式为：
    dict:xxx.txt

    dict:xxx.txt
以下类推。
而在Shiori.dll之中，则定义了华和梨这个伪AI 的所有功能，程式函式以及运作方法。当指定载入华和梨系统的Ghost 时，Materia 会去呼叫该Ghost目录里面的shiori.dll ，并根据shiori.dll 里面的定义来读取需要的AI语法文件，并根据内容设计作出相对的反应。
如此，其他的伪AI系统也都是采用这个架构，并遵循着相同的目录对应模式。不过在档名以及语法格式、支援功能等会有不同。使用者可以依照自己的喜好挑选一个伪AI 来发展自己的人格。
一个简单的概念：如同程式语言之中有VB、JAVA、C等等，虽然架构皆不尽相同，但同样都是程式语言的一种，可以用来发展程式。伪AI也是类似的观念。


核心程式语法 - SAKURA Script 
核心程式采用的标准语法为SAKURA Script ，这是一种语言描述字串，主要用来撰写讯息以及提供系统变数用。或许您会对所谓的SAKURA Script 与伪AI语法感到困惑，不是同样都是语法吗？
简单的来说， SAKURA Script 是由核心程式本身提供的事件变数、程式参数，但它仅是单纯的叙述事实以及讯息而已，本身并不包含结构化的程式架构、也无运算判断能力－－明确的说，它仅只是个「播放器」而已。而上述的这些功能，例如if 判定、 for 回圈等等演算法，都必须要靠伪AI来提供。然后伪AI再根据AI辞书的内容，产生符合SAKURA Script 语法的字串，让核心程式去执行。
或许您会问，为何不把伪AI直接作在核心程式里面呢？这就牵扯到伺か本身的特性与自由度的问题了，以目前的架构来说，人人都可以发展自己的伪AI，只要遵循标准的SAKURA语法以及各项规格即可。
如果直接将AI系统制作在核心里面，除了增加程式撰写困难之外(作者只有一人)，也很难有多样化的发展性。如今有如此众多的伪AI可以选择，也归功于这开放的架构。

结语 
现在，你应该对「伪AI」这个名词有所了解了。接下来，就请进入SHIORI列表中，选择一个你偏好的伪AI来制作人格吧。


常见的伪AI
美坂
华和梨
文 / YAYA
里々 / SATORIYA
不常见的伪AI
里珠
翡翠
结奈
lisp栞

常见的伪AI 

美坂 
早期常和华和梨于中文伪春菜界被提起，虽然在日本方面似乎已较少被提到，但在中文界至今仍为不少中文人格作者所持续使用。已停止开发。
作者：ls (川上 新夜)
配布：http://lovelove.rabi-en-rose.net/index_misaka.php
优点：语法较为简洁，适合初学者了解。
缺点：已停止开发，想再加强伪AI的能力，势必需要对程式语言有足够的了解。
范本：美坂 phase 101
资源：
美坂
美坂规格原文

华和梨
早期开始至今常和美坂于中文伪春菜界被提起，在日本方面由于有「Openkeeps」（作者：とわ(昵称)）等模板程式的原因所以华和梨算是相当普及，但由于「Openkeeps」并没有中文化版本所以遗憾地华和梨普及率在中文界并不如日本。
作者：华和梨开发团队
配布：http://kawari.sourceforge.net/
优点：持续升级中，功能不弱。
缺点：语法较为复杂，初学者想驾驭可能需要花点功夫。
范本：OpenKEEPS
资源：
逝(wiki)
なごやか。

文 / YAYA 
最大的特色在于支援万国语UTF-8?编码。原作者已开发终了，目前由YAYA团队继续开发AYA 的改造版『Yet another AYA』。
作者：umeici
配布：http://ms.shillest.net/yaya.xhtml
优点：仿C语言的语法，本身和程式语言接近，功能相当强大。
缺点：亲和力不足，不会程式语言的编写者在学习上有一定的难度。
范本：绀野ややめ，绀野芽芽美(中文版)
资源：
AYA Version 5 说明文书
AYA人格范本
AYA系统函式参照表
AYA 初心者入门
AYA小技巧
文wiki「文屋」

里々 / SATORIYA 
常见于日文界。目前中文界尚无使用此SHIORI的人格。
作者：栉ヶ浜 やぎ
配布：http://www.geocities.jp/poskoma/ (里々)　　　http://ms.shillest.net/satoriya.xhtml (SATORIYA)
优点：语法相当口语化，对于日系的使用者来说较易于学习。
缺点：中文语系上可能存在某些问题。(未确认)
范本：Ｒポストと狛犬(备用连结)
资源：
postic(旧称『里々とか』)
里々wiki
La Bagatelle

不常见的伪AI 

里珠
作者：山科冰鱼

翡翠
配布：http://hisui.sourceforge.jp/main.htm

结奈
作者：Rhein
范本：http://www.towano.net/ua-ks/yuhna.nar
资源：
YUHNA Second Edition Support Center

lisp栞
作者：phonoたん


开发人格的基础 
了解变数这样的概念
了解回圈的概念
了解函式的使用概念
了解什么是设定档
了解数学(设计好感度，或随机事件时会用到)以及座标轴(这在写Shell的语法时会用到)

程式底层 
一般说底层，主要是指使用者或操作者在使用电脑程式时，不会直接接触到的部份。
例如档案的编修与复制，使用者是透过某种应用软体(例如文字编辑软体)来操作，只要使用滑鼠与键盘来操作即可制作出文件。
但此时对电脑来讲实际上发生的，是磁碟以及记忆体内的资料在位址中作转换，而使用者能理解的文字，对电脑来讲是0跟1的组合，这些使用者不会接触到，软体会帮使用者处里好的工作，就称为程式底层。

高阶语法 
一般所谓高阶语法，是指接近人类所使用的语言而构成的语法，当然由于程式设计是西方人发明的，所谓的接近人类使用的语言指的主要是以标准英语为基础。
相对于高阶语法的低阶语法，使用的是0与1为基础的语言，也就是机器语言。
这里要提的高阶语法，是指经过整合过的伪AI所提供的语法。因为即使以C语言这样的高阶语言来讲，要达成许许多多的功能也仍需要撰写相当多的小程式与函式库，如果伪AI以这样来运作的话，肯定会打死许多没碰过程式或者没学那么深入的玩家，也会加大伪春菜入门的门槛。
所以就有了自定语法的架构出来，由伪AI再将复杂的C程式处里过，最后提供玩家必要用到的现成功能，这些由伪AI再自行定义出来的语法，就是这里提的高阶语法。
你可以把伪AI想像成魔法师，函数功能想像成供魔法师驱使的小精灵或招唤兽，只要套用这个函数功能就可以达成某种目的，不需要自己再去写复杂的功能。这个函数就是所谓的高阶语法部分，至于底层的操作以及与SSP核心程式的沟通，则交由函数再透过伪AI去处里就好了。
这样只要具备有程式语言初学概念的玩家，就可以很快的上手来设计伪春菜人格，不用再去读那些厚厚的C语法书了。

Ghost构筑 
Ghost构筑
阅读之前
基本构成
先来点导引观念-1 descript.txt篇
先来点导引观念-2 脚本篇
descript.txt
Shiori.dll
Makoto.dll
Saori.dll
thumbnail.pnr
AI的写法

阅读之前 
在继续本篇之前，请先阅读完人格概要，先有基本的档案配置概念。

基本构成 
一个Ghost的成型至少包含下列三种资料
定义Ghost基本资料的描述文件：descript.txt。
记述人格对话、动作的脚本。日文是写作"辞书"，原意为字典，实际上是一个或多个程式语法档的集合。
解析脚本并转为SakuraScript给SSP核心程式运行的DLL档案：SHIORI、MAKOTO等。

先来点导引观念-1 descript.txt篇 
下面会继续探讨各个部分所代表的功用，但可能会有点混乱(其实这部份教学还不知道要怎么写比较好，所以先提供这个导引观念篇。)，请先停一下看看这个段落。
原则上descript.txt比较容易理解，在descript.txt里记载了这个人格所使用的文字编码、人格名称、伪AI(Shiori)档案名称等设定。
透过这个档案，SSP核心程式才会知道要载入怎样的核心程式，还有一些人格的基本资讯，如名字等等，才能在"人格切换"的选单功能中，将各个人格的名称显示出来。
descript.txt档案有个特性：档名是固定的，不会变更。SSP核心程式第一个读取的一定是这个档案。

先来点导引观念-2 脚本篇 
在日文里面，是用"辞书"来称呼这些档案。原则上这些档案是纯文字档型态，内容通常包括一些伪AI(Shiori)所提供的语法以及程式架构。
例如橘花的ai_2t.txt大概是这样：

这些看起来很类似程式语法的东西，其实是伪AI所提供的语法，所以当你使用不同的伪AI时，这些语法也会不同。(这些语法是经过整合的高阶语法，与C程式码已经相去甚远，详情可以参考高阶语法一文)
尽管这些语法已经透过伪AI简化过，但要进行写作的话，玩家还是需要有基本的程式设计概念。
脚本的主要功能是提供玩家订制自己的伪春菜人格内容，这包括了：
选单配置
滑鼠事件
计时器
载入外挂程式(SAORI)
对话内容
以下...
总之就是一个人格能从对话框里面给予玩家的东西，通通写在这些档案里面了。原则上脚本档案可以全部写在同一个档案内，但一般为了方便整哩，通常会依照所写的功能再分类成好几个不同的档案。
而伪春菜核心程式(或说伪AI)要如何知道这些分散的档案在哪里?其实秘诀就在于"设定档"里面，如同descript.txt，伪AI也会有自独创的设定档，这些设定档的名称与位置由伪AI自行定义，因此您必须要去研读该伪AI的文件，才能了解这个档案是放在哪里。


以AYA为范例，她的设定档是指与AYA的伪AI档案同名的.txt档案，例如：你将伪AI档案设定为Aya5.dll，则其设定档为Aya5.txt。
而要载入的各个脚本档案资讯，就放在这个"设定档"里面。
接下来请继续看以下的各部分档案详细介诏：

descript.txt 
人格描述档，用来指定人格的名称、制作者等基本资讯。
标准的descript.txt内容如下：
charset,UTF-8
type,ghost
name,さくら

sakura.name,さくら
kero.name,うにゅう

craftman,Fujiaki Kasori
craftmanw,圭反藤谅
craftmanurl,http://sakura.mikage.to/

icon,sakura.ico

shiori,first.dll
makoto,firstr.dll
『charset』 可设定文字编码，请依照你所撰写的人格所使用的编码进行设定，例如UTF-8，Shift_JIS、BIG5、GB2312等。但要注意这个设定并非万能，如果你所使用的伪AI不支援多国语系，那么即使这个地方设定正确，在不同的语系环境时还是会遭遇严重的乱码问题。伪春菜的多国语系支援是目前尚不能好好解决的问题，因为这个没有强制标准，目前除了少数几个伪AI，大部分都是只支援日文语系编码的。
『type』是档案类别，有ghost、shell、ballon等几种，是人格本体的话设为ghost即可。
『name』即人格总体资料的名称，嫌命名麻烦的话就直接用人格角色名即可。
『sakura.name』及『kero.name』是人格的角色名称。
『craftman』部份则是作者的相关资讯。
『icon』设定的图示会把右下角的核心程式图示换掉。
『shiori』跟『makoto』都是伪AI的部份，请务必设定正确。
其他详细的规格请参见GhostDescription?。

Shiori.dll 
Shiori负责解析人格辞书资料，选出适当的词句，组合成对话。是让人格活泼起来的重要关键。事件发生的时候（例如对时、说话、Communicate、Ballon选单..）， 核心程式都会呼叫Shiori，而Shiori就生成相对应的对话传回。
藉由设定人格的反应以及会话内容，让Shiori产生了看似AI行为的这样一个过程，我们称之为『伪AI』，或者『人工无脑*1』。
由于Shiori是开放规格，所以有很多种现成的Shiori可以使用。不同的人格，可能使用不同的Shiori跟Makoto。目前常见的有华和梨、文、美坂等等。
一般说来，自己写人格的时候，就是撰写供Shiori处理的人格资料。不同的Shiori，人格资料的写法也不一样。通常是夹杂对话资料和简单程式码的文字档。对话资料必须使用Sakura Script写成。性质有点像写网页使用的HTML。程式的部分，大多的Shiori也提供变数、事件、条件判断、回圈等等像是程式语言的功能。甚至也有人用Shiori提供的功能写成小游戏的，像是まゆら这个有名的人格。
但是，不会写程式的人也别放弃得太早。也有方法可以不需要撰写复杂的程式的，伪春菜中有所谓『人格范本』这样的东西，像是华和梨的KEEPS、文的绀野ややめ?这样的东西，已经帮你写好了大部分的功能，只要把对话的部份稍做修改，便能做出一个专属于自己的人格。
Shiori的汉字是栞。命名来源是日本Key公司出版的游戏「Kanon」中的人物「美坂栞」
各Shiori的详细说明请参照SHIORI。
注意：Shiori档案不一定就叫做Shiori.dll，这个名称是可以任意更动的，并没有固定标准，实际档名请参考descript.txt内的shiori设定值。

Makoto.dll 
Makoto负责第二阶段的处理。接管Shiori传回的资料，被称为「Translator」。经由内外部伺服器接收到Nanika的资料，也会经过makoto的处理。它是选择性的元件，在Shiori的发展日趋强大之后， 使用到Makoto的人格也愈来愈少了。主要负责句子的「加工」，如语尾变化等等。Makoto也是开放的规格，和Shiori比较起来，功能就比较不那么固定。不才撰写的转码元件，就是在这个阶段，替对话做转码的动作。
Makoto的汉字是「真琴」。命名来源同样是「Kanon」中的人物「泽渡真琴」。

Saori.dll 
想使用Shiori中未搭载的功能时，就必须借助SAORI这样的东西来完成我们的要求，像是变更桌布、播放音乐等。每个Shiori载入SAORI的方式都不一样，这部份请参看各Shiori专有的说明书。
详细说明请参照SAORI。
注意：saori档案不一定就叫做saori.dll，这个名称是可以任意更动的，并没有固定标准，实际档名也不好捉摸。
这个不像是shiori有标准的descript.txt记载。有时候你必须要去搜索各种资料才知道到正确用法。

thumbnail.pnr 
如果你想要让你的Ghost有透明的banner图，只要制作好相关的图示，背景设定为红或蓝色(三原色)，存成thumbnail.png，再将thumbnail.png副档名更名为.pnr，这样核心程式就会取该张图片座标的(0,0)位置的颜色为透明颜色， 效果跟shell目录底下的surface.png系列相同。
这个档案放在Ghost_Name主目录下或者ghost\master都可以。


AI的写法? 
关于人格资料的详细撰写方法， 因为各家shiori的语法各异，且不是三言二语能讲完的，所以会慢慢另外开设专栏介绍。
目前您最需要的是将档案的配置方式弄懂，如此一来无论是日后要编写AI或者仅是想修改自己喜欢的人格等都能得心应手。
现在站上已经有AYA的说明文件了，建议您先看完人格概要与本篇之后，进入该专栏文章中一探究竟，详细的撰写方法会在那边提及。




Shell设置教学 

在谈完了伪AI篇，相信您应该已经有一个基本的概念：目录以及档案对应正确，是让Ghost正确运作的第一步。如果还没有的话，请先复习前几篇文章喔。
接下来要谈的是Shell制作完全入手，这部分可说是整个Ghost制作之中最简单的一环(不包含绘制CG)。简单的来说，我们只是指定某个表情号码出现时的显现方式(可能是静态或者动态)。而在AI之中，则仅需直接指定表情号码，如此配合起来即可让Ghost神灵活现。

档案配置 
在Ghost_Name\Shell\master\ 目录之下，主要由下列三种档案所组成：
descript.txt
surface.txt
*.png (图档集合)
这三种档案的意义如下：

descript.txt 
作用：负责设定shell的名称、图片选单的底图。如果您的shell名称为中文，那么记得在最顶端加入charset的设定，建议使用UTF-8。这个档案各AI系统是通用的。
//↓此Shell的名称以及制作人
charset,UTF-8
name,NeiNei
type,shell
craftman,Man
id,NeiNei

//↓指定对话框出现的电脑萤幕座标
sakura.balloon.offsetx,20
sakura.balloon.offsety,60
kero.balloon.offsetx,20
kero.balloon.offsety,50

//↓指定图片选单档案
menu.background.bitmap.filename,menu_background.png
menu.foreground.bitmap.filename,menu_foreground.png
menu.sidebar.bitmap.filename,menu_sidebar.png

Surface.txt： 
作用：表情图片指定以及效果。
接下来先从最基本的指定静态表情图片谈起吧，在此我们假定您已经绘制好一定数量的surface图片。要注意的是，这些图片必须为.png格式，大部分的绘图软体如PhotoShop、PhotoImpact、以及Macromedia Fireworks等都有支援。另外背景颜色(要透明的区域)尽量设定为纯三原色(红、蓝、绿) 较不容易出问题。

 

*.png 
这些便是Shell底下的基本构成图片，根据使用上的不同分为静态图片与动态图片两种。
静态图片通常是一张完整的人格图片，来表达一特定的动作或表情。而动态图片则是一张张特定区块的小图片，是为了产生动画效果而制作的。

surface.txt的编排 
首先必须注意的是各种伪AI之间的设定上有小部分的不同，以下提出华和梨与美坂二个伪AI来解说：

华和梨 
看你有多少张shell图片，以surfaceX.png为命名方式，X代表从0开始的任意数字，到100或200也没关系，范围主要看你要如何去设定。在此以surface0.png为范例。
用记事本开启surface.txt，以下是文件设定的内容：
surface0
{
collision0,51,47,268,119,head //→设定头部座标范围
collision1,94,124,229,209,face //→设定脸庞座标范围
collision2,105,218,196,287,bust //→设定胸部座标范围
}

surface1
{
collision0,51,47,268,119,head
collision1,94,124,229,209,face
collision2,105,218,196,287,bust
}
.
.
.
以此类推，每张图片都要对应一个surface描述语言，如果无指定的话系统会使用surfaceX.png中的X号码为该张图片的内定值，但只有静态显示，对任何点选都不会有反应。
你会注意到每个设定上都有四个为一组的座标值，这些座标值依照第一部分的说明，运用coordin程式即可方便的取得。要注意的是座标值范围不可重叠，否则Ghost就没办法作出适当的反应了。
一般来说：
头部 → Shell 中有头发的大部分
脸颊→ Shell 中头发以下，包含眼睛、嘴部、跟脸形的范围
胸部 → (消音)~
基本上是不会重叠的，除非设定错误。

美坂 
所有的设定同上，但请注意这边的不同处：
sakura.surface.alias
{
1,[0]
2,[0]
4,[0]
5,[0]
6,[0]
7,[0]
8,[0]
}

kero.surface.alias
{
11,[10]
}

surface0
{
collision0,51,47,268,119,Head
collision1,94,124,229,209,Face
collision2,105,218,196,287,Bust
}

首先美坂有多前导设定值。可以设定那个表情要配合哪个编号的surface png档。另外注意到了吗?surface描述语言的设定里， "Head" 是大写开头，而华和梨是"head" ，小写开头。造成这种差异的原因在于程式码的写法差异，倒反过来也是可以，但是这样一来你就要一一修改原始码中所有与Mouse事件有关的函式，所以建议是照着默认的方式去写就好了。
以下是另一种比较整齐的美坂shell的写法：
surface0
{
element0,base,surface0.png,0,0

collision0,51,47,268,119,Head
collision1,94,124,229,209,Face
collision2,105,218,196,287,Bust
}
以下类推，直到需要用到的表情指定完毕为止。
注意"element0,base,surface0.png,0,0"这一行，它可以让你值定surface0要用哪一张图片来对应，也就是说图片不一定要按照编号来取档名，直接在surface.txt里面再指定也是可以的。
如你要使用surface200.png来代表surface0表情，那么要这样写：
element0,base,surface200.png,0,0
PS除了档名的部分之外，其余的语法不建议变更。以下的部分都将会采用这个写法。

文 
设定方式大致上与华和梨无异，Surface的区块名称建议为字首大写。

surfaceX.png的公定编号 
尽管玩家们可以任意指定自己想要的编号，不过还是有个不成文的协定标准，如下表所示：
Sakura端 kero端
00 正常 10 正常
01 害羞
02 惊讶 11 惊讶
03 不安
04 失望
05 微笑
06 闭眼
07 生气
08 冷笑(汗)
09 生气(面红耳赤样)
25 唱歌 19 唱歌
基本上如果您没有特别指定表情的档案编号，那么系统就会使用如上表的预设值作为各表情对应的图片档案。使用公定表情的好处是当Shell去任意搭配其他的标准的Ghost时，不用再特别的去修改编号即可展现出大致正确的表情。另外一般有添加表情设定的歌词卡也会依照这个公定的编号以便适合每个Ghost而不至于有不符合的表情出现。
当然如果您坚持要自订专属的编号也是可以的。

Balloon设置

descript.txt 
Balloon设置相关，内容项参见BalloonDescript。

balloonc*.png 
输入框的Balloon，档对应如下：
balloonc0.png Send框
balloonc1.png Communicate框
balloonc2.png Teach框
balloonc3.png Input框
balloonc4.png Address Bar框(SSP/1.11 Pre25，省略时用Input代替)

balloons*.png 
\0侧Balloon，一般档对应如下：
balloons0.png 普通Balloon(左侧)
balloons1.png 普通Balloon(右侧)
balloons2.png 竖长Balloon(左侧)
balloons3.png 竖长Balloon(右侧)

balloonk*.png 
\1侧Balloon，一般档对应同上（大小稍小）。

online*.png 
网路通信时显示的图片，以编号顺序回圈显示动画效果。

arrow*.png 
用于卷动文章的箭头图片，0向上、1向下。

balloons*s.txt/balloons*k.txt 
单独设置对应Balloon的档，可覆写descirpt.txt的内容，内容项参见BalloonDescript。

thumbnail.png 
Balloon预览图，也可使用bmp或jpg。将png尾码名改为pnr时，以左上(0,0)处图元为透明色。当然也可使用pna蒙版来透明。


SSP追加图片档： 

marker.png和sstp_new.png。
分别为\![*]标记和SSTP标记，如果没有则都载入sstp.png(SSP/1.10.17以后)。

ok_down.png/ok_up.png、cancel_down.png/cancel_up.png、mode_down.png/mode_up.png 
Balloon的输入框OK/取消/模式切换按钮使用图片(SSP/2.02.19以后)。

制作更新档

中文SSP下的更新档制作法 
在ssp\ghost\制作一个ghost_update目录(随意名称也行，只要不与现有的ghost冲突到即可)，在这个目录里面依照下面的结构(也就是你人格档案所放置的结构以及位置)放好你要更新的档案(不一定要全部，只要放需要更新的档案即可)：
ghost_update\要更新的档案
├ghost\master\
│ ├descript.txt(一定要有，取自要制作更新的ghost目录)
│ └要更新的档案
└shell\master\要更新的档案
PS注意请勿将原人格目录中的update相关档案放入。
开启SSP→右键选单→便利机能→浏览器(记得勾选禁止自动关闭)。
此时你会发现有二个同样的ghost名称，请直接点选刚才制作的ghost_update路径目录。
在其上按下滑鼠右键→制作更新文档。

如此更新的相关档案程式就会帮你制作好，之后将ghost_update目录底下的所有档案以及子目录上传到你的网页空间相对应的目录底下即可，在此范例为/wingzero/update/ 。



以辅助软体更新的方法 

そだて 
来源网址： http://code.google.com/p/satoriya-shiori/请下载页面右边的"sodate-phase10.zip"
把そだて下载下来后，请将里面的档案解压缩至你的NAMED Ghost资料夹中。
其位置如下：
+ SSP
   + ghost
     + 你的人格名称
       + ghost
       + shell
       - sodate.exe
       - sodate_setup.exe
首先开启sodate_setup.exe，在右上角的更新对象中加入要线上更新的档案列表。这里允许万用字元(*)。
一个简单的YAYA人格设置范例：
ghost/master/yaya.txt
ghost/master/dic/*
ghost/master/saori/*
设置完成后请按右下的「OK」，然后再执行sodate.exe，此时updates2.dau会自动生成，再来将此档案与要更新的档案上传至server即可。如果你的线上更新server允许FTP连接的话，也可以将左上的FTP设置一下，以后要更新伪春菜时只要执行一次sodate.exe便能完成，连上线更新的步骤都可以省了。

人格释出

.nar是目前伪春菜专用档案格式，藉由依照标准规格制作出来的.nar档案，玩家可以很方便的用拖曳的方式安装新的人格、外挂(如之前提到的Headline)等档案。大家可以不用想的太复杂，说穿了，它只是个压缩档案，压缩格式是ZIP。
您可以用Winzip或者WinRAR等工具软体直接去开启、或解压缩这样的档案。在阅读本篇之前可以先参考Headline的.nar档案制作过程，而这里则针对人格.nar档案制作方式进行说明。

SSP快速建立 

使用方法 
SSP本身即内建有快速建立人格NAR档的选项，其使用方法如下：
(人格图像)右键→便利机能→人格浏览
至此应该会开启了一个视窗显示着SSP已安装的所有人格，此时找出你要建立NAR档的人格，对其点选右键，选取「建立NAR档」，再选择档案放置的位置，大功告成！

删除多余的档案 
以SSP快速建立的NAR档本身即已将SSP相关的记录消去(即profile资料夹)，你所需要做的只是将人格伪AI的变数记录档消去。如果没有另行设定的话，以YAYA为例，即删去yaya_variable.cfg，若是美坂，则要删去misaka_vars.txt这个档案。

手动建立 

要准备的档案 
首先我们假设你已经制作好一个完整的人格，目录配置如下：
Ghost_Name+
├ghost+
│ └master
└shell+
       └master
(Ghost_Nmae表您制作的人格目录名称，请随意自订)
此时请在Ghost_Name主目录之下新增一纯文字档，命名为install.txt，并编辑其内容：
type,ghost →这边指定.nar的install型态为Ghost，不可变更。
name,橘花050312版 →您的Ghost名称。
directory,KiKKa_C →要安装的目的目录。
如您的人格为中文名称也无关系，name属性只是用来让核心程式说出安装好的人格名称，安装完毕之后只会在对话框显示一次，之后就不会再出现了。

删除多余的档案 
如果你在制作的过程中是边写人格边开核心程式(如SSP)来DEBUG的话，Ghost与Shell的档案夹中便可能会多出一个profile资料夹，建议在包装成.nar档案前删除掉或移去别的地方。另外一个要删的就是SHIORI的变数记录档，不同的SHIORI会有不同的档名，请参照各自SHIORI的设定。
这样一来，对SSP而言，这便是一个全新的、干净的人格了。

制作.NAR档 
编辑完毕install.txt并储存之后，使用滑鼠将整个Ghost_Name目录底下的档案圈选起来，按下滑鼠右键选择制作成ZIP档案。

之后将制成的压缩档案副档名更改为.nar即可。

至此便算大公告成了。您只要将这个.nar档案上传至网页供大家下载安装即可。






#入门篇到此结束，请继续学习更重要的东西——Sakura语法基础

